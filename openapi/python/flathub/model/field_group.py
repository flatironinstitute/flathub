"""
    FlatHUB API

    Most operations support GET and POST, either of which accepts JSON request bodies or query parameters.  In most cases, query parameters are ignored when there is a request body.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from flathub.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from flathub.exceptions import ApiAttributeError


def lazy_import():
    from flathub.model.field_stats import FieldStats
    from flathub.model.type import Type
    globals()['FieldStats'] = FieldStats
    globals()['Type'] = Type


class FieldGroup(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('base',): {
            'F': "f",
            'I': "i",
            'B': "b",
            'S': "s",
            'V': "v",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'key': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'title': (str,),  # noqa: E501
            'type': (Type,),  # noqa: E501
            'base': (str,),  # noqa: E501
            'stats': (FieldStats,),  # noqa: E501
            'attachment': (bool,),  # noqa: E501
            'store': (bool,),  # noqa: E501
            'dict': (str,),  # noqa: E501
            'wildcard': (bool,),  # noqa: E501
            'units': (str,),  # noqa: E501
            'enum': ([str],),  # noqa: E501
            'disp': (bool,),  # noqa: E501
            'sub': ([FieldGroup],),  # noqa: E501
            'reversed': (bool,),  # noqa: E501
            'terms': (bool,),  # noqa: E501
            'scale': (float,),  # noqa: E501
            'required': (bool,),  # noqa: E501
            'descr': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'key': 'key',  # noqa: E501
        'name': 'name',  # noqa: E501
        'title': 'title',  # noqa: E501
        'type': 'type',  # noqa: E501
        'base': 'base',  # noqa: E501
        'stats': 'stats',  # noqa: E501
        'attachment': 'attachment',  # noqa: E501
        'store': 'store',  # noqa: E501
        'dict': 'dict',  # noqa: E501
        'wildcard': 'wildcard',  # noqa: E501
        'units': 'units',  # noqa: E501
        'enum': 'enum',  # noqa: E501
        'disp': 'disp',  # noqa: E501
        'sub': 'sub',  # noqa: E501
        'reversed': 'reversed',  # noqa: E501
        'terms': 'terms',  # noqa: E501
        'scale': 'scale',  # noqa: E501
        'required': 'required',  # noqa: E501
        'descr': 'descr',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, key, name, title, type, base, *args, **kwargs):  # noqa: E501
        """FieldGroup - a model defined in OpenAPI

        Args:
            key (str): local name of field within this group
            name (str): global unique (\"variable\") name of field within the catalog
            title (str): display name of the field within the group
            type (Type):
            base (str): base storage type (floating, integral, boolean, string, void)

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            stats (FieldStats): [optional]  # noqa: E501
            attachment (bool): this is a meta field for a downloadable attachment (type boolean, indicating presence). [optional]  # noqa: E501
            store (bool): true if this field is stored but not indexed, so not permitted for filtering or aggregations. [optional]  # noqa: E501
            dict (str): unique key index to global field dictionary (for compare). [optional]  # noqa: E501
            wildcard (bool): allow wildcard prefix searching on keyword field (\"xy*\"). [optional]  # noqa: E501
            units (str): display units. [optional]  # noqa: E501
            enum ([str]): if present, display values as these keywords instead (integral or boolean: enum[<int>value]). [optional]  # noqa: E501
            disp (bool): include field in data display by default. [optional]  # noqa: E501
            sub ([FieldGroup]): if this is present, this is a pseudo grouping field which does not exist itself, but its properties apply to its children. [optional]  # noqa: E501
            reversed (bool): display axes and ranges in reverse (high-low). [optional]  # noqa: E501
            terms (bool): display dynamically as a dropdown of values. [optional]  # noqa: E501
            scale (float): scale factor to dict-comparable units, display  value*scale (for compare). [optional]  # noqa: E501
            required (bool): true = required filter; false = top-level (default) optional filter; missing = normal. [optional]  # noqa: E501
            descr (str): description of field within the group. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.key = key
        self.name = name
        self.title = title
        self.type = type
        self.base = base
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, key, name, title, type, base, *args, **kwargs):  # noqa: E501
        """FieldGroup - a model defined in OpenAPI

        Args:
            key (str): local name of field within this group
            name (str): global unique (\"variable\") name of field within the catalog
            title (str): display name of the field within the group
            type (Type):
            base (str): base storage type (floating, integral, boolean, string, void)

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            stats (FieldStats): [optional]  # noqa: E501
            attachment (bool): this is a meta field for a downloadable attachment (type boolean, indicating presence). [optional]  # noqa: E501
            store (bool): true if this field is stored but not indexed, so not permitted for filtering or aggregations. [optional]  # noqa: E501
            dict (str): unique key index to global field dictionary (for compare). [optional]  # noqa: E501
            wildcard (bool): allow wildcard prefix searching on keyword field (\"xy*\"). [optional]  # noqa: E501
            units (str): display units. [optional]  # noqa: E501
            enum ([str]): if present, display values as these keywords instead (integral or boolean: enum[<int>value]). [optional]  # noqa: E501
            disp (bool): include field in data display by default. [optional]  # noqa: E501
            sub ([FieldGroup]): if this is present, this is a pseudo grouping field which does not exist itself, but its properties apply to its children. [optional]  # noqa: E501
            reversed (bool): display axes and ranges in reverse (high-low). [optional]  # noqa: E501
            terms (bool): display dynamically as a dropdown of values. [optional]  # noqa: E501
            scale (float): scale factor to dict-comparable units, display  value*scale (for compare). [optional]  # noqa: E501
            required (bool): true = required filter; false = top-level (default) optional filter; missing = normal. [optional]  # noqa: E501
            descr (str): description of field within the group. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.key = key
        self.name = name
        self.title = title
        self.type = type
        self.base = base
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
