"""
    FlatHUB API

    Most operations support GET and POST, either of which accepts JSON request bodies or query parameters.  In most cases, query parameters are ignored when there is a request body.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.attachments1_request import Attachments1Request
from openapi_client.model.attachments_request import AttachmentsRequest
from openapi_client.model.catalog_meta import CatalogMeta
from openapi_client.model.catalog_result import CatalogResult
from openapi_client.model.count_request import CountRequest
from openapi_client.model.csv_data import CsvData
from openapi_client.model.data import Data
from openapi_client.model.data_request import DataRequest
from openapi_client.model.download_request import DownloadRequest
from openapi_client.model.ecsv_data import EcsvData
from openapi_client.model.filters_value import FiltersValue
from openapi_client.model.fits_data import FitsData
from openapi_client.model.gzip_data import GzipData
from openapi_client.model.histogram_request import HistogramRequest
from openapi_client.model.histogram_result import HistogramResult
from openapi_client.model.json_data import JsonData
from openapi_client.model.ndjson_data import NdjsonData
from openapi_client.model.npy_data import NpyData
from openapi_client.model.sort_field import SortField
from openapi_client.model.stats_request import StatsRequest
from openapi_client.model.stats_result import StatsResult


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.attachment_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/{catalog}/attachment/{field}/{id}',
                'operation_id': 'attachment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'field',
                    'id',
                ],
                'required': [
                    'catalog',
                    'field',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'field':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'field': 'field',
                    'id': 'id',
                },
                'location_map': {
                    'catalog': 'path',
                    'field': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.attachments_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/{catalog}/attachments/{format}',
                'operation_id': 'attachments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'format',
                    'filters',
                    'fields',
                ],
                'required': [
                    'catalog',
                    'format',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                    'fields',
                ]
            },
            root_map={
                'validations': {
                    ('fields',): {

                    },
                },
                'allowed_values': {
                    ('format',): {

                        "SH": "sh",
                        "URIS": "uris",
                        "ZIP": "zip"
                    },
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'format':
                        (str,),
                    'filters':
                        (Filters,),
                    'fields':
                        (FieldList,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'format': 'format',
                    'filters': 'filters',
                    'fields': 'fields',
                },
                'location_map': {
                    'catalog': 'path',
                    'format': 'path',
                    'filters': 'query',
                    'fields': 'query',
                },
                'collection_format_map': {
                    'fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'text/x-shellscript',
                    'text/uri-list',
                    'application/zip'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.attachments1_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/{catalog}/attachments/{format}/{field}',
                'operation_id': 'attachments1',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'format',
                    'field',
                    'filters',
                ],
                'required': [
                    'catalog',
                    'format',
                    'field',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "SH": "sh",
                        "URIS": "uris",
                        "ZIP": "zip"
                    },
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'format':
                        (str,),
                    'field':
                        (str,),
                    'filters':
                        (Filters,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'format': 'format',
                    'field': 'field',
                    'filters': 'filters',
                },
                'location_map': {
                    'catalog': 'path',
                    'format': 'path',
                    'field': 'path',
                    'filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/x-shellscript',
                    'text/uri-list',
                    'application/zip'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.attachments1_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/{catalog}/attachments/{format}/{field}',
                'operation_id': 'attachments1_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'format',
                    'field',
                    'attachments1_request',
                ],
                'required': [
                    'catalog',
                    'format',
                    'field',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "SH": "sh",
                        "URIS": "uris",
                        "ZIP": "zip"
                    },
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'format':
                        (str,),
                    'field':
                        (str,),
                    'attachments1_request':
                        (Attachments1Request,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'format': 'format',
                    'field': 'field',
                },
                'location_map': {
                    'catalog': 'path',
                    'format': 'path',
                    'field': 'path',
                    'attachments1_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/x-shellscript',
                    'text/uri-list',
                    'application/zip'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.attachments_post_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/{catalog}/attachments/{format}',
                'operation_id': 'attachments_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'format',
                    'attachments_request',
                ],
                'required': [
                    'catalog',
                    'format',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "SH": "sh",
                        "URIS": "uris",
                        "ZIP": "zip"
                    },
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'format':
                        (str,),
                    'attachments_request':
                        (AttachmentsRequest,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'format': 'format',
                },
                'location_map': {
                    'catalog': 'path',
                    'format': 'path',
                    'attachments_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/x-shellscript',
                    'text/uri-list',
                    'application/zip'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.catalog_endpoint = _Endpoint(
            settings={
                'response_type': (CatalogResult,),
                'auth': [],
                'endpoint_path': '/{catalog}',
                'operation_id': 'catalog',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                ],
                'required': [
                    'catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                },
                'location_map': {
                    'catalog': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.count_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [],
                'endpoint_path': '/{catalog}/count',
                'operation_id': 'count',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'filters',
                ],
                'required': [
                    'catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'filters':
                        (Filters,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'filters': 'filters',
                },
                'location_map': {
                    'catalog': 'path',
                    'filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.count_post_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [],
                'endpoint_path': '/{catalog}/count',
                'operation_id': 'count_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'count_request',
                ],
                'required': [
                    'catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'count_request':
                        (CountRequest,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                },
                'location_map': {
                    'catalog': 'path',
                    'count_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.data_endpoint = _Endpoint(
            settings={
                'response_type': (Data,),
                'auth': [],
                'endpoint_path': '/{catalog}/data',
                'operation_id': 'data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'count',
                    'filters',
                    'fields',
                    'sort',
                    'offset',
                    'object',
                ],
                'required': [
                    'catalog',
                    'count',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'count',
                    'fields',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('count',): {

                        'inclusive_maximum': 10000,
                        'inclusive_minimum': 0,
                    },
                    ('fields',): {

                    },
                    ('offset',): {

                        'inclusive_maximum': 0,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'count':
                        (int,),
                    'filters':
                        (Filters,),
                    'fields':
                        (FieldList,),
                    'sort':
                        (Sort,),
                    'offset':
                        (int,),
                    'object':
                        (bool,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'count': 'count',
                    'filters': 'filters',
                    'fields': 'fields',
                    'sort': 'sort',
                    'offset': 'offset',
                    'object': 'object',
                },
                'location_map': {
                    'catalog': 'path',
                    'count': 'query',
                    'filters': 'query',
                    'fields': 'query',
                    'sort': 'query',
                    'offset': 'query',
                    'object': 'query',
                },
                'collection_format_map': {
                    'fields': 'csv',
                    'sort': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.data_post_endpoint = _Endpoint(
            settings={
                'response_type': (Data,),
                'auth': [],
                'endpoint_path': '/{catalog}/data',
                'operation_id': 'data_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'data_request',
                ],
                'required': [
                    'catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'data_request':
                        (DataRequest,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                },
                'location_map': {
                    'catalog': 'path',
                    'data_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.download_endpoint = _Endpoint(
            settings={
                'response_type': (NdjsonData,),
                'auth': [],
                'endpoint_path': '/{catalog}/data/{format}',
                'operation_id': 'download',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'format',
                    'filters',
                    'fields',
                    'sort',
                ],
                'required': [
                    'catalog',
                    'format',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                    'fields',
                ]
            },
            root_map={
                'validations': {
                    ('fields',): {

                    },
                },
                'allowed_values': {
                    ('format',): {

                        "NDJSON": "ndjson",
                        "NDJSON.GZ": "ndjson.gz",
                        "CSV": "csv",
                        "CSV.GZ": "csv.gz",
                        "FITS": "fits",
                        "FITS.GZ": "fits.gz",
                        "NPY": "npy",
                        "NPY.GZ": "npy.gz",
                        "JSON": "json",
                        "JSON.GZ": "json.gz",
                        "ECSV": "ecsv",
                        "ECSV.GZ": "ecsv.gz"
                    },
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'format':
                        (str,),
                    'filters':
                        (Filters,),
                    'fields':
                        (FieldList,),
                    'sort':
                        (Sort,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'format': 'format',
                    'filters': 'filters',
                    'fields': 'fields',
                    'sort': 'sort',
                },
                'location_map': {
                    'catalog': 'path',
                    'format': 'path',
                    'filters': 'query',
                    'fields': 'query',
                    'sort': 'query',
                },
                'collection_format_map': {
                    'fields': 'csv',
                    'sort': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/x-ndjson',
                    'text/csv',
                    'application/fits',
                    'application/x-npy',
                    'application/json',
                    'text/x-ecsv',
                    'application/gzip'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.download_post_endpoint = _Endpoint(
            settings={
                'response_type': (NdjsonData,),
                'auth': [],
                'endpoint_path': '/{catalog}/data/{format}',
                'operation_id': 'download_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'format',
                    'download_request',
                ],
                'required': [
                    'catalog',
                    'format',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "NDJSON": "ndjson",
                        "NDJSON.GZ": "ndjson.gz",
                        "CSV": "csv",
                        "CSV.GZ": "csv.gz",
                        "FITS": "fits",
                        "FITS.GZ": "fits.gz",
                        "NPY": "npy",
                        "NPY.GZ": "npy.gz",
                        "JSON": "json",
                        "JSON.GZ": "json.gz",
                        "ECSV": "ecsv",
                        "ECSV.GZ": "ecsv.gz"
                    },
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'format':
                        (str,),
                    'download_request':
                        (DownloadRequest,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'format': 'format',
                },
                'location_map': {
                    'catalog': 'path',
                    'format': 'path',
                    'download_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/x-ndjson',
                    'text/csv',
                    'application/fits',
                    'application/x-npy',
                    'application/json',
                    'text/x-ecsv',
                    'application/gzip'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.histogram_endpoint = _Endpoint(
            settings={
                'response_type': (HistogramResult,),
                'auth': [],
                'endpoint_path': '/{catalog}/histogram',
                'operation_id': 'histogram',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'fields',
                    'filters',
                    'quartiles',
                ],
                'required': [
                    'catalog',
                    'fields',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'fields':
                        (HistogramList,),
                    'filters':
                        (Filters,),
                    'quartiles':
                        (str,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'fields': 'fields',
                    'filters': 'filters',
                    'quartiles': 'quartiles',
                },
                'location_map': {
                    'catalog': 'path',
                    'fields': 'query',
                    'filters': 'query',
                    'quartiles': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.histogram_post_endpoint = _Endpoint(
            settings={
                'response_type': (HistogramResult,),
                'auth': [],
                'endpoint_path': '/{catalog}/histogram',
                'operation_id': 'histogram_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'histogram_request',
                ],
                'required': [
                    'catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'histogram_request':
                        (HistogramRequest,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                },
                'location_map': {
                    'catalog': 'path',
                    'histogram_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.schema_csv_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/{catalog}/schema.csv',
                'operation_id': 'schema_csv',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                ],
                'required': [
                    'catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                },
                'location_map': {
                    'catalog': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/csv'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.schema_sql_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/{catalog}/schema.sql',
                'operation_id': 'schema_sql',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                ],
                'required': [
                    'catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                },
                'location_map': {
                    'catalog': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/sql'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.stats_endpoint = _Endpoint(
            settings={
                'response_type': (StatsResult,),
                'auth': [],
                'endpoint_path': '/{catalog}/stats',
                'operation_id': 'stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'filters',
                    'fields',
                ],
                'required': [
                    'catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'fields',
                ]
            },
            root_map={
                'validations': {
                    ('fields',): {

                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'filters':
                        (Filters,),
                    'fields':
                        (FieldList,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                    'filters': 'filters',
                    'fields': 'fields',
                },
                'location_map': {
                    'catalog': 'path',
                    'filters': 'query',
                    'fields': 'query',
                },
                'collection_format_map': {
                    'fields': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.stats_post_endpoint = _Endpoint(
            settings={
                'response_type': (StatsResult,),
                'auth': [],
                'endpoint_path': '/{catalog}/stats',
                'operation_id': 'stats_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog',
                    'stats_request',
                ],
                'required': [
                    'catalog',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog':
                        (str,),
                    'stats_request':
                        (StatsRequest,),
                },
                'attribute_map': {
                    'catalog': 'catalog',
                },
                'location_map': {
                    'catalog': 'path',
                    'stats_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.top_endpoint = _Endpoint(
            settings={
                'response_type': ([CatalogMeta],),
                'auth': [],
                'endpoint_path': '/',
                'operation_id': 'top',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def attachment(
        self,
        catalog,
        field,
        id,
        **kwargs
    ):
        """Download a row attachment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attachment(catalog, field, id, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs
            field (str): field name of attachment
            id (str): _id for row of interest

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        kwargs['field'] = \
            field
        kwargs['id'] = \
            id
        return self.attachment_endpoint.call_with_http_info(**kwargs)

    def attachments(
        self,
        catalog,
        format,
        **kwargs
    ):
        """Download attachments in bulk from matching rows for multiple fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attachments(catalog, format, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs
            format (str):

        Keyword Args:
            filters (Filters): filter in query string (see descriptions for non-standard formatting of range queries). [optional]
            fields (FieldList): list of fields to return. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        kwargs['format'] = \
            format
        return self.attachments_endpoint.call_with_http_info(**kwargs)

    def attachments1(
        self,
        catalog,
        format,
        field,
        **kwargs
    ):
        """Download attachments in bulk from matching rows for single field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attachments1(catalog, format, field, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs
            format (str):
            field (str):

        Keyword Args:
            filters (Filters): filter in query string (see descriptions for non-standard formatting of range queries). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        kwargs['format'] = \
            format
        kwargs['field'] = \
            field
        return self.attachments1_endpoint.call_with_http_info(**kwargs)

    def attachments1_post(
        self,
        catalog,
        format,
        field,
        **kwargs
    ):
        """Download attachments in bulk from matching rows for single field  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attachments1_post(catalog, format, field, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs
            format (str):
            field (str):

        Keyword Args:
            attachments1_request (Attachments1Request): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        kwargs['format'] = \
            format
        kwargs['field'] = \
            field
        return self.attachments1_post_endpoint.call_with_http_info(**kwargs)

    def attachments_post(
        self,
        catalog,
        format,
        **kwargs
    ):
        """Download attachments in bulk from matching rows for multiple fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attachments_post(catalog, format, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs
            format (str):

        Keyword Args:
            attachments_request (AttachmentsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        kwargs['format'] = \
            format
        return self.attachments_post_endpoint.call_with_http_info(**kwargs)

    def catalog(
        self,
        catalog,
        **kwargs
    ):
        """Get full metadata about a specific catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.catalog(catalog, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CatalogResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        return self.catalog_endpoint.call_with_http_info(**kwargs)

    def count(
        self,
        catalog,
        **kwargs
    ):
        """Get count of matching rows (given some filters)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.count(catalog, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs

        Keyword Args:
            filters (Filters): filter in query string (see descriptions for non-standard formatting of range queries). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        return self.count_endpoint.call_with_http_info(**kwargs)

    def count_post(
        self,
        catalog,
        **kwargs
    ):
        """Get count of matching rows (given some filters)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.count_post(catalog, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs

        Keyword Args:
            count_request (CountRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        return self.count_post_endpoint.call_with_http_info(**kwargs)

    def data(
        self,
        catalog,
        count,
        **kwargs
    ):
        """Get a sample of raw data rows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data(catalog, count, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs
            count (int):

        Keyword Args:
            filters (Filters): filter in query string (see descriptions for non-standard formatting of range queries). [optional]
            fields (FieldList): list of fields to return. [optional]
            sort (Sort): how to order rows (see descriptions for non-standard formatting of sort order). [optional]
            offset (int): [optional] if omitted the server will use the default value of 0
            object (bool): [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Data
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        kwargs['count'] = \
            count
        return self.data_endpoint.call_with_http_info(**kwargs)

    def data_post(
        self,
        catalog,
        **kwargs
    ):
        """Get a sample of raw data rows  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.data_post(catalog, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs

        Keyword Args:
            data_request (DataRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Data
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        return self.data_post_endpoint.call_with_http_info(**kwargs)

    def download(
        self,
        catalog,
        format,
        **kwargs
    ):
        """Download raw data in bulk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download(catalog, format, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs
            format (str):

        Keyword Args:
            filters (Filters): filter in query string (see descriptions for non-standard formatting of range queries). [optional]
            fields (FieldList): list of fields to return. [optional]
            sort (Sort): how to order rows (see descriptions for non-standard formatting of sort order). [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NdjsonData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        kwargs['format'] = \
            format
        return self.download_endpoint.call_with_http_info(**kwargs)

    def download_post(
        self,
        catalog,
        format,
        **kwargs
    ):
        """Download raw data in bulk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_post(catalog, format, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs
            format (str):

        Keyword Args:
            download_request (DownloadRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            NdjsonData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        kwargs['format'] = \
            format
        return self.download_post_endpoint.call_with_http_info(**kwargs)

    def histogram(
        self,
        catalog,
        fields,
        **kwargs
    ):
        """Get a histogram of data across one or more fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.histogram(catalog, fields, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs
            fields (HistogramList): field(s) along which to calculate histograms (see descriptions for non-standard formatting of size/log)

        Keyword Args:
            filters (Filters): filter in query string (see descriptions for non-standard formatting of range queries). [optional]
            quartiles (str): optional field within which to calculate quartiles. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HistogramResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        kwargs['fields'] = \
            fields
        return self.histogram_endpoint.call_with_http_info(**kwargs)

    def histogram_post(
        self,
        catalog,
        **kwargs
    ):
        """Get a histogram of data across one or more fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.histogram_post(catalog, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs

        Keyword Args:
            histogram_request (HistogramRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            HistogramResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        return self.histogram_post_endpoint.call_with_http_info(**kwargs)

    def schema_csv(
        self,
        catalog,
        **kwargs
    ):
        """Get a CSV representation of the catalog schema (no data)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schema_csv(catalog, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        return self.schema_csv_endpoint.call_with_http_info(**kwargs)

    def schema_sql(
        self,
        catalog,
        **kwargs
    ):
        """Get a SQL representation of the catalog schema (no data)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schema_sql(catalog, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        return self.schema_sql_endpoint.call_with_http_info(**kwargs)

    def stats(
        self,
        catalog,
        **kwargs
    ):
        """Get statistics about fields (given some filters)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stats(catalog, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs

        Keyword Args:
            filters (Filters): filter in query string (see descriptions for non-standard formatting of range queries). [optional]
            fields (FieldList): list of fields to return. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            StatsResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        return self.stats_endpoint.call_with_http_info(**kwargs)

    def stats_post(
        self,
        catalog,
        **kwargs
    ):
        """Get statistics about fields (given some filters)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stats_post(catalog, async_req=True)
        >>> result = thread.get()

        Args:
            catalog (str): catalog name from list of catalogs

        Keyword Args:
            stats_request (StatsRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            StatsResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['catalog'] = \
            catalog
        return self.stats_post_endpoint.call_with_http_info(**kwargs)

    def top(
        self,
        **kwargs
    ):
        """Get the list of available dataset catalogs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.top(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [CatalogMeta]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.top_endpoint.call_with_http_info(**kwargs)

