# coding: utf-8

"""
    FlatHUB API

    Most operations support GET and POST, either of which accepts JSON request bodies or query parameters.  In most cases, query parameters are ignored when there is a request body.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from openapi_client.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class FieldValueScalar(
    ComposedSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    a scalar value for a field
    """

    @classmethod
    @property
    @functools.cache
    def _composed_schemas(cls):
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error because the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        anyOf_0 = Float64Schema
        anyOf_1 = Float32Schema
        anyOf_2 = Float32Schema
        
        
        class anyOf_3(
            _SchemaValidator(
                inclusive_maximum=9223372036854775807,
                inclusive_minimum=-9223372036854775808,
            ),
            Int64Schema
        ):
            pass
        
        
        class anyOf_4(
            _SchemaValidator(
                inclusive_maximum=-1,
                inclusive_minimum=0,
            ),
            Int64Schema
        ):
            pass
        
        
        class anyOf_5(
            _SchemaValidator(
                inclusive_maximum=2147483647,
                inclusive_minimum=-2147483648,
            ),
            Int32Schema
        ):
            pass
        
        
        class anyOf_6(
            _SchemaValidator(
                inclusive_maximum=32767,
                inclusive_minimum=-32768,
            ),
            IntSchema
        ):
            pass
        
        
        class anyOf_7(
            _SchemaValidator(
                inclusive_maximum=127,
                inclusive_minimum=-128,
            ),
            IntSchema
        ):
            pass
        anyOf_8 = BoolSchema
        anyOf_9 = StrSchema
        return {
            'allOf': [
            ],
            'oneOf': [
            ],
            'anyOf': [
                anyOf_0,
                anyOf_1,
                anyOf_2,
                anyOf_3,
                anyOf_4,
                anyOf_5,
                anyOf_6,
                anyOf_7,
                anyOf_8,
                anyOf_9,
            ],
            'not':
                None
        }

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, str, date, datetime, int, float, decimal.Decimal, None, list, tuple, bytes],
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'FieldValueScalar':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
