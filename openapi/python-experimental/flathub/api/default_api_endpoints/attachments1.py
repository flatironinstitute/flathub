# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
import functools  # noqa: F401
from urllib3._collections import HTTPHeaderDict

from flathub import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from flathub.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)

from flathub.model.filters import Filters

# query params
FiltersSchema = Filters
RequestRequiredQueryParams = typing.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing.TypedDict(
    'RequestOptionalQueryParams',
    {
        'filters': FiltersSchema,
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_filters = api_client.QueryParameter(
    name="filters",
    style=api_client.ParameterStyle.FORM,
    schema=FiltersSchema,
    explode=True,
)
# path params
CatalogSchema = StrSchema


class FormatSchema(
    _SchemaEnumMaker(
        enum_value_to_name={
            "sh": "SH",
            "uris": "URIS",
            "zip": "ZIP",
        }
    ),
    StrSchema
):
    
    @classmethod
    @property
    def SH(cls):
        return cls("sh")
    
    @classmethod
    @property
    def URIS(cls):
        return cls("uris")
    
    @classmethod
    @property
    def ZIP(cls):
        return cls("zip")
FieldSchema = StrSchema
RequestRequiredPathParams = typing.TypedDict(
    'RequestRequiredPathParams',
    {
        'catalog': CatalogSchema,
        'format': FormatSchema,
        'field': FieldSchema,
    }
)
RequestOptionalPathParams = typing.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_catalog = api_client.PathParameter(
    name="catalog",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CatalogSchema,
    required=True,
)
request_path_format = api_client.PathParameter(
    name="format",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FormatSchema,
    required=True,
)
request_path_field = api_client.PathParameter(
    name="field",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FieldSchema,
    required=True,
)
_path = '/{catalog}/attachments/{format}/{field}'
_method = 'GET'
SchemaFor200ResponseBodyTextXShellscript = AnyTypeSchema
SchemaFor200ResponseBodyTextUriList = AnyTypeSchema
SchemaFor200ResponseBodyApplicationZip = AnyTypeSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyTextXShellscript,
        SchemaFor200ResponseBodyTextUriList,
        SchemaFor200ResponseBodyApplicationZip,
    ]
    headers: Unset = unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'text/x-shellscript': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextXShellscript),
        'text/uri-list': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextUriList),
        'application/zip': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationZip),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'text/x-shellscript',
    'text/uri-list',
    'application/zip',
)


class Attachments1(api_client.Api):

    def attachments1(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict(),
        path_params: RequestPathParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        Download attachments in bulk from matching rows for single field
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs(RequestPathParams, path_params)

        _path_params = {}
        for parameter in (
            request_path_catalog,
            request_path_format,
            request_path_field,
        ):
            parameter_data = path_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        _query_params = []
        for parameter in (
            request_query_filters,
        ):
            parameter_data = query_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _query_params.extend(serialized_data)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=_path,
            method=_method,
            path_params=_path_params,
            query_params=tuple(_query_params),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response
